Cap√≠tulo 5: Zumbis Lutando!

Agora que temos uma fonte de alguma aleatoriedade em nosso contrato, podemos us√°-la em nossa batalha zumbi para calcular os resultados.

Nossas batalhas zumbis ir√£o funcionar da seguinte maneira:

    Voc√™ escolhe um de seus zumbis, e escolhe um zumbi do oponente para atacar.
    Se voc√™ √© o zumbi atacante, voc√™ ter√° 70% de chance de vencer. O zumbi defensor ter√° 30% de chande de vencer.
    Todos zumbis (atacante e defensores) ter√£o um contador de vit√≥rias chamado winCount e um contador de derrotas chamado lossCount que ir√° incrementar dependendo do resultado da batalha.
    Se o zumbi atacante vence, este aumenta um n√≠vel e cria um novo zumbi.
    Se o mesmo perde, nada acontece (exceto o incremento do lossCount).
    Se vence ou perde, o tempo de resfriamento do zumbi atacante ser√° ativado.

√â um monte de l√≥gica para implementar, ent√£o iremos fazer por partes nos pr√≥ximos cap√≠tulos.
Vamos testar

    Dando ao nosso contrato uma vari√°vel uint chamada attackVictoryProbability e atribuindo o valor igual a 70.

    Crie uma fun√ß√£o chamada attack. Esta ter√° dois par√¢metros: _zombieId(um uint) e _targetId (tamb√©m um uint). Esta ser√° uma fun√ß√£o do tipo external.

Deixe o corpo da fun√ß√£o vazio por enquanto.


Cap√≠tulo 6: Refatorando L√≥gicas

Qualquer pessoa que chamar nossa fun√ß√£o attack - queremos ter certeza que o usu√°rio seja o dono do zumbi que esta usando para atacar. Isto seria um problema de seguran√ßa se voc√™ pudesse atacar com o zumbi de outra pessoa!

Voc√™ pode imaginar como podemos adicionar uma verifica√ß√£o para ver se a pessoa que esta chamando a fun√ß√£o √© a dona do _zombieId que esta passando como par√¢metro?

Pense um pouco, e veja se voc√™ vem com alguma resposta em mente.

Espere um momento... Lembre de alguns c√≥digos de li√ß√µes anteriores...

Resposta abaixo, n√£o continue at√© voc√™ ter pensado um pouco.
A Resposta

Fizemos esta mesma checagem v√°rias vezes nas li√ß√µes anteriores. Em changeName(), changeDna(), e feedAndMultiply(), n√≥s usamos a seguinte verifica√ß√£o:

require(msg.sender == zombieToOwner[_zombieId]);

Esta √© mesma l√≥gica que precisamos para nossa fun√ß√£o attack. Uma vez que usamos a mesma l√≥gica v√°rias vezes, vamos mover esse c√≥digo para uma fun√ß√£o modificadora (modifier) para limpar o nosso c√≥digo e evitar repeti√ß√µes de c√≥digo.
Vamos testar

Estamos de volta a zombiefeeding.sol, uma vez que este foi o primeiro lugar que usamos a l√≥gica. Vamos refator√°-lo em seu pr√≥prio modificador (modifier).

    Crie um modifier chamado ownerOf. Este ter√° 1 argumento, _zombieId (um uint).

    O corpo da fun√ß√£o modificadora dever√° usar o require para o msg.sender ser igual a zombieToOwner[_zombieId], ent√£o continue a fun√ß√£o. Voc√™ pode usar como refer√™ncia o zombiehelper.sol se voc√™ n√£o lembrar da sintaxe do modifier.

    Mude a defini√ß√£o da fun√ß√£o de feedAndMultiply para que use o modificador ownerOf.

    Agora que estamos usando o modifier, voc√™ pode remover a linha require(msg.sender == zombieToOwner[_zombieId]);.



Cap√≠tulo 8: De Volta ao Ataque!

Chega de refatora√ß√£o - de volta ao zombieattack.sol.

Vamos continuar a defini√ß√£o da nossa fun√ß√£o attack, agora que n√≥s temos a fun√ß√£o modificadora ownerOf para usar.
Vamos testar

    Adicione a fun√ß√£o modificadora ownerOf em attack para ter certeza que o chamador √© o dono do _zombieId.

    A primeira coisa que a nossa fun√ß√£o deve fazer √© obter um ponteiro do tipo storage para ambos os zumbis e ent√£o podemos interagir mais facilmente com eles:

    a. Declare um Zombie storage chamado myZombie, e atribua igual a zombies[_zombieId].

    b. Declare um Zombie storage chamado enemyZombie, e atribua igual a zombies[_targetId].

    Vamos usar o n√∫mero aleat√≥rio entre 0 e 99 para determinar o resultado da nossa batalha. Ent√£o declare um uint chamado rand, e atribua o valor igual ao resultado da fun√ß√£o randMod com 100 como argumento.


Cap√≠tulo 9: Zumbi Vence e Perde

Para o nosso jogo zumbi, queremos manter o registro de quantas batalhas os nossos zumbis ganharam e perderam. Desta maneira podemos ter um quadro com os l√≠deres no jogo.

Poder√≠amos guardar esse dado de diferentes maneiras em nossa DApp - como mapeamentos usando mapping, em uma struct, ou na pr√≥pria estrutura Zombie.

Cada maneira tem as suas vantagens e desvantagens dependendo de como iremos interagir com o dado. Neste tutorial, vamos guardar os status em nossa estrutura Zombie por simplicidade, e cham√°-las winCount e lossCount.

Ent√£o vamos voltar para zombiefactory.sol, e adicionar estas propriedades para a nossa estrutura Zombie.
Vamos testar

    Modifique a nossa estrutura Zombie para ter duas propriedades a mais:

    a. winCount, com uint16

    b. lossCount, tamb√©m com uint16

        Nota: Lembre-se, uma vez que podemos empacotar uints dentro das estruturas, n√≥s queremos usar os menores uints que pudermos. Um uint8 √© muito pequeno, uma vez que 2^8 = 256 - se nossos zumbis atacarem uma vez por dia, eles podem estourar esse valor em um ano. Mas 2^16 √© 65536 - ent√£o ao menos que o usu√°rio ganhe ou perca a cada dia em 179 anos, estaremos seguros.

    Agora que temos novas propriedades em nossa estrutura Zombie, precisamos mudar a defini√ß√£o da fun√ß√£o em _createZombie().

    Altere a defini√ß√£o da cria√ß√£o de zumbi ent√£o a cada novo zumbi criado este come√ßa com 0 vit√≥rias e 0 derrotas.

    zombiefactory.sol
    zombieattack.sol
    zombiehelper.sol
    zombiefeeding.sol
    ownable.sol



Cap√≠tulo 10: Vit√≥ria Zumbi üòÑ

Agora que temos um winCount e lossCount, podemos atualiz√°-los dependendo de qual zumbi venceu a luta.

No cap√≠tulo 6 n√≥s calculamos um n√∫mero aleat√≥rio entre 0 e 100. Agora vamos usar este n√∫mero para determinar quem vence a luta, e atualizar os nossos status de acordo.
Vamos testar

    Crie uma declara√ß√£o if que verifica se rand √© menor que ou igual a attackVictoryProbability.

    Se esta condi√ß√£o for verdadeira, nosso zumbi venceu! Ent√£o:

    a. Incremente myZombie winCount.

    b. Incremente myZombie level. (Subiu um n√≠vel!!!!!!!)

    c. Incremente enemyZombie lossCount. (Perdedor!!!!!! üò´ üò´ üò´)

    d. Execute a fun√ß√£o feedAndMultiply. Verifique zombiefeeding.sol para ver sintaxe de como cham√°-lo. Para o terceiro argumento (_species), passe o valor "zombie". (No momento isto n√£o faz nada, mas para mais tarde quando adicionarmos funcionalidades extras para criar zumbis baseados em zumbis).


Cap√≠tulo 11: Derrota Zumbi üòû

Agora que n√≥s codificamos o que acontece quando o seu zumbi vence, vamos resolver o que acontece quando estes s√£o derrotados.

Em nosso jogo, quando zumbis s√£o derrotados, eles n√£o perdem n√≠vel - eles simplesmente incrementam seus lossCount, e seus resfriamentos s√£o ativados ent√£o eles devem esperar um dia antes de atacar novamente.

Para implementar esta l√≥gica, iremos precisar da declara√ß√£o else.

Declara√ß√µes else s√£o escritas como em JavaScript e muitas outras linguagens:

if (zombieCoins[msg.sender] > 100000000) {
  // Voc√™ esta rico!!!
} else {
  // Precisamos de mais ZombieCoins...
}

Vamos testar

    Adicione uma declara√ß√£o else. Se nosso zumbi perdeu:

    a. Incremente myZombie lossCount.

    b. Incremente enemyZombie winCount.

    Fora da declara√ß√£o else, execute o c√≥digo da fun√ß√£o _triggerCooldown em myZombie. Desta maneira o zumbi s√≥ poder√° atacar uma vez por dia.

