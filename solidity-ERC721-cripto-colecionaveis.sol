Cap√≠tulo 1: Tokens no Ethereum

Vamos falar sobre tokens.

Se voc√™ esteve acompanhando o Ethereum por per√≠odo de tempo, voc√™ provavelmente ouviu pessoas falando sobre tokens - especificamente ERC20 tokens.

Um token no Ethereum √© basicamente um smart contract (contrato inteligente) que segue algumas regras comuns ‚Äî isto √©, ele implementa um conjunto padr√£o de fun√ß√µes que todos os outros contratos de token compartilham, como o transfer(address _to, uint256 _value) e balanceOf(address _owner).

Internamente o smart contract normalmente tem um mapeamento, mapping(address => uint256) balances, que mant√™m o registro de quanto em saldo cada endere√ßo tem.

Ent√£o basicamente um token √© somente contrato que mantem o registro de quem √© o dono desse token, e algumas fun√ß√µes, ent√£o esses usu√°rios podem transferir seus tokens para outros endere√ßos.
Por que isso importa?

Uma vez que todo token ERC20 compartilha o mesmo conjunto de fun√ß√µes com os mesmos nomes, todos eles podem interagir da mesma maneira.

Isto significa se voc√™ construir uma aplica√ß√£o que √© capaz de interagir com um token ERC20, ela ser√° capaz de interagir com qualquer token ERC20. Deste jeito mais tokens podem facilmente serem adicionados a sua aplica√ß√£o no futuro sem a necessidade the qualquer c√≥digo customizado. Voc√™ pode simples plugar um novo contrato de token.

Um exemplo disso poderia ser uma exchange. Quando uma exchange adiciona um novo token ERC20, na verdade ela s√≥ precisa adicionar um outro smart contract para funcionar. Usu√°rios podem dizer para este contrato enviar tokens para o endere√ßo da carteira da exchange, e a exchange pode dizer ao contrato para enviar os tokens de volta para os usu√°rios quando eles requisitarem um saque.

A exchange s√≥ precisa implementar esta l√≥gica da transfer√™ncia uma vez, ent√£o quando quiser adicionar um novo token ERC20, √© simplesmente um problema de adicionar um novo endere√ßo de contrato no banco de dados.
Outros padr√µes de token

Tokens ERC20 s√£o realmente legais para tokens que agem como moedas. Mas eles n√£o s√£o particularmente √∫teis para representar zumbis em nosso jogo de zumbi.

Primeiro, zumbis n√£o s√£o divis√≠veis como moedas ‚Äî Eu posso enviar para voc√™ 0.237 ETH, mas transferir pra voc√™ 0.237 de um zumbi realmente n√£o faz sentido algum.

Segundo, todos os zumbis n√£o s√£o criados iguais. Seu zumbi N√≠vel 2 "Steve" √© totalmente diferente do meu zumbi N√≠vel 732 "H4XF13LD MORRIS üíØüíØüòéüíØüíØ". (Nem mesmo perto, Steve).

H√° um outro padr√£o de token que se encaixa bem melhor para cripto-colecion√°veis como CryptoZombies ‚Äì e eles chamados de tokens ERC721.

Tokens ERC721_ n√£o s√£o intercambi√°veis uma vez que cada um √© suposto para ser √∫nico, e n√£o divis√≠veis. Voc√™ somente pode troc√°-los em unidades inteiras, e cada um tem um ID √∫nico. Ent√£o esses se encaixam perfeitamente para fazer nossos zumbis troc√°veis.

    Note que usando um padr√£o como ERC721 tem o benef√≠cio que n√£o precisamos ter que implementar uma l√≥gica de leil√£o ou garantia dentro do nosso contrato que determina como os jogadores devem trocar / vender nossos zumbis. Se obedecer-mos a especifica√ß√£o, qualquer um poderia criar uma plataforma de troca para ativos cripto-colecion√°veis ERC721, e nossos zumbis ERC721 seriam utiliz√°veis nesta plataforma. Ent√£o os benef√≠cios s√£o claros de usar um padr√£o de token ao inv√©s de criar a sua pr√≥pria l√≥gica de trocas.



Cap√≠tulo 2: Padr√£o ERC721, M√∫ltipla Heran√ßa

Vamos dar uma olhada no padr√£o ERC721:

contract ERC721 {
  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);
  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);

  function balanceOf(address _owner) public view returns (uint256 _balance);
  function ownerOf(uint256 _tokenId) public view returns (address _owner);
  function transfer(address _to, uint256 _tokenId) public;
  function approve(address _to, uint256 _tokenId) public;
  function takeOwnership(uint256 _tokenId) public;
}

Esta √© a lista de m√©todos que precisamos implementar, que iremos fazer em partes nos pr√≥ximos cap√≠tulos.

Isso parece um monte, mas sinta-se sobrecarregado! Estamos aqui para guiar voc√™.

    Nota: O padr√£o ERC721 √© atualmente um rascunho, e ainda n√£o h√° oficialmente um acordo de implementa√ß√£o. Neste tutorial usamos a vers√£o atual da biblioteca do OpenZeppelin, mas √© poss√≠vel que mude no futuro antes do lan√ßamento oficial. Ent√£o considere esta uma poss√≠vel implementa√ß√£o, mas n√£o considere uma vers√£o oficial dos tokens ERC721.

Implementando um contrato de token

Quando implementar um contrato de token, a primeira coisa que fazemos √© copiar a interface para o nosso pr√≥prio arquivo Solidity e import√°-lo. import "./erc721.sol";. Ent√£o n√≥s teremos o nosso contrato herdando-o, e iremos sobrepor cada m√©todo com a defini√ß√£o da fun√ß√£o.

Mas espere ‚Äì ZombieOwnership j√° esta herdando do ZombieAttack ‚Äì como pode tamb√©m herdar do ERC721?

Para a nossa sorte em Solidity, seu contrato pode herdar de m√∫ltiplos contrato conforme segue:

contract SatoshiNakamoto is NickSzabo, HalFinney {
  // Meu deus, os segredos do universo foram revelados!
}

Como voc√™ pode ver, quando usando a m√∫ltipla heran√ßa, voc√™ pode separar os m√∫ltiplos contrato que voc√™ estar herdando com um v√≠rgula, ,. Neste caso, nosso contrato esta herdando de NickSzabo e HalFinney.



Cap√≠tulo 3: balanceOf & ownerOf

√ìtimo, vamos mergulhar na implementa√ß√£o do ERC721!

J√° sa√≠mos na frente e copiamos uma casca vazia de todos as fun√ß√µes que voc√™ ir√° implementar nesta li√ß√£o.

Neste cap√≠tulos, iremos implementar os dois primeiros m√©todos: balanceOf e ownerOf.
balanceOf

  function balanceOf(address _owner) public view returns (uint256 _balance);

Esta fun√ß√£o simplesmente recebe um address, e retorna quantos tokens que o address tem.

Em nosso caso, nossos "tokens" s√£o Zumbis. Voc√™ lembra onde em nossa DApp n√≥s guardamos quantos zumbis um dono tem?
ownerOf

  function ownerOf(uint256 _tokenId) public view returns (address _owner);

Esta fun√ß√£o recebe um token ID (em nosso caso, um ID Zumbi), e retorna o address da pessoa que o possui.

Novamente, esta √© muito f√°cil para implementar-mos, uma vez que j√° temos um mapping (mapeamento) em nossa DApp que guarda esta informa√ß√£o. Podemos implementar esta fun√ß√£o em uma linha, s√≥ uma declara√ß√£o de return.

    Nota: Lembre, uint256 √© equivalente √† uint. Est√°vamos usando uint em nosso c√≥digo at√© agora, mas n√≥s usamos uint256 aqui por que copiamos e colamos da especifica√ß√£o.




