/**

Mapeamentos e EndereÃ§os (Mappings / Addresses)

Vamos fazer o nosso jogo multi-jogador dando aos zumbis em nosso banco de dados um proprietÃ¡rio.

Para fazer isto, nÃ³s vamos precisar de 2 novos tipos de dados: mapping e address.
EndereÃ§os

O blockchain do Ethereum Ã© feito de accounts (contas), que vocÃª pode imaginar como contas de banco. Um conta tem um saldo Ether (a moeda usada no blockchain do Ethereum), e vocÃª pode enviar e receber pagamentos de outras contas, como a sua conta de banco que vocÃª pode enviar uma transferÃªncia (DOC/TED) em dinheiro para outras contas.

Cada conta tem um address (endereÃ§o), que vocÃª pode imaginar como o nÃºmero da conta bancÃ¡ria. Esse nÃºmero Ã© um identificador Ãºnico que indica a conta, e se parece com isto:

0x0cE446255506E92DF41614C46F1d6df9Cc969183

(Este endereÃ§o pertence ao time do CryptoZombies. Se vocÃª esta gostando do CryptoZombies, vocÃª pode nos enviar algum Ether! ðŸ˜‰)

NÃ³s vamos entrar nos detalhes minuciosos dos endereÃ§os em futuras liÃ§Ãµes, por enquanto vocÃª sÃ³ precisa entender que um endereÃ§o Ã© propriedade de um usuÃ¡rio especÃ­fico (ou um smart contract).

EntÃ£o nÃ³s podemos usar este ID Ãºnico como propriedade dos nossos zumbis. Quando um usuÃ¡rio interagir com a nossa aplicaÃ§Ã£o e criar um novo zumbi, nÃ³s iremos definir a propriedade desses zumbis para o endereÃ§o de Ethereum que chamou a funÃ§Ã£o.
Mapeamentos

Na LiÃ§Ã£o 1 nÃ³s vimos as structs (estruturas) e arrays (listas). Mapeamentos sÃ£o uma outra forma de guardar dados organizados em Solidity.
Um mapeamento Ã© essencialmente um armazenamento chave-valor para guardar e buscar dados. No primeiro exemplo, a chave Ã© o address (endereÃ§o) e o valor Ã© um uint, e no segundo exemplo a chave Ã© um uint e o valor Ã© uma string.

Definindo um mapping (mapeamento) se parece com isto:
*/

// Para uma aplicaÃ§Ã£o financeira, guardando um uint que guarda o saldo da conta do usuÃ¡rio
mapping (address => uint) public accountBalance;

// Ou pode ser usado para guardar nomes de usuÃ¡rios baseados no userId (id do usuÃ¡rio)
mapping (uint => string) userIdToName;














